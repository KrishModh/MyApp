from flask import Flask, render_template, request, redirect, session
import oracledb

app = Flask(__name__)
app.secret_key = "your_secret_key"

# --- Oracle DB Connection ---
def get_conn():
    dsn = "localhost:1521/XEPDB1"   # default service for Oracle XE 21c
    return oracledb.connect(user="system", password="Krish159*", dsn=dsn)

# --- Database Setup ---
def init_db():
    conn = get_conn()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            CREATE TABLE users(
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                username VARCHAR2(100) UNIQUE NOT NULL,
                email VARCHAR2(100) UNIQUE NOT NULL,
                password VARCHAR2(100) NOT NULL
            )
        """)
        conn.commit()
    except oracledb.DatabaseError as e:
        # Table may already exist → ignore ORA-00955
        error_obj, = e.args
        if error_obj.code != 955:  # ORA-00955: name already used by existing object
            raise
    finally:
        conn.close()

init_db()

# --- Routes ---
@app.route("/")
def home():
    return redirect("/login")

@app.route("/signup", methods=["GET", "POST"])
def signup():
    if request.method == "POST":
        username = request.form["username"]
        email = request.form["email"]
        password = request.form["password"]

        conn = get_conn()
        cursor = conn.cursor()
        try:
            cursor.execute(
                "INSERT INTO users (username, email, password) VALUES (:1, :2, :3)",
                [username, email, password]
            )
            conn.commit()
        except oracledb.IntegrityError:
            return "❌ Username or Email already exists"
        finally:
            conn.close()
        return redirect("/login")
    return render_template("signup.html")

@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        role = request.form["role"]
        email = request.form["email"]
        password = request.form["password"]

        if role == "admin":
            # ✅ Admin login check
            if email == "k456@gmail.com" and password == "123456":
                session["admin"] = True
                return redirect("/admin")
            else:
                return "❌ Invalid Admin credentials"

        else:
            # ✅ User login check
            conn = get_conn()
            cursor = conn.cursor()
            cursor.execute(
                "SELECT id, username, email FROM users WHERE email=:1 AND password=:2",
                [email, password]
            )
            user = cursor.fetchone()
            conn.close()

            if user:
                session["username"] = user[1]
                session["email"] = user[2]
                return redirect("/dashboard")
            else:
                return "❌ Invalid user credentials"
    return render_template("login.html")


# admin page
@app.route("/admin")
def admin_page():
    if "admin" in session:
        conn = get_conn()
        cursor = conn.cursor()
        cursor.execute("SELECT id, username, email FROM users")
        users = cursor.fetchall()

        # ✅ Total user count
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]

        conn.close()
        return render_template("admin.html", users=users, total_users=total_users)
    else:
        return redirect("/login")




@app.route("/dashboard")
def dashboard():
    if "username" in session:
        conn = get_conn()
        cursor = conn.cursor()
        cursor.execute("SELECT id, username, email FROM users")
        users = cursor.fetchall()
        conn.close()
        return render_template("dashboard.html", username=session["username"], users=users)
    else:
        return redirect("/login")

@app.route("/delete/<int:user_id>")
def delete_user(user_id):
    if "username" not in session:
        return redirect("/login")

    conn = get_conn()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM users WHERE id=:1", [user_id])
    conn.commit()
    conn.close()
    return redirect("/dashboard")

@app.route("/logout")
def logout():
    session.pop("username", None)
    return redirect("/login")

if __name__ == "__main__":
    app.run(debug=True)
